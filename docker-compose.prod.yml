services:
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - client
      - app
  app:
    image: ${APP_IMAGE}
    container_name: app
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend
    restart: unless-stopped

  client:
    image: ${CLIENT_IMAGE}
    container_name: client
    depends_on:
      - app
    ports:
      - "5173:4173"
    networks:
      - backend
    restart: unless-stopped

  db:
    image: postgres:17.5
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  redis:
    image: redis:8.0.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    restart: unless-stopped

  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
    restart: unless-stopped

volumes:
  db-data:

networks:
  backend:
    driver: bridge
